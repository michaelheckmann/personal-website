---
import type { HTMLAttributes } from "astro/types";

import { cn } from "@/lib/utils";

interface Props extends HTMLAttributes<"input"> {
  id: string;
  label: string;
  fadeColor: string;
}

const { label, class: className, fadeColor, ...props } = Astro.props;
---

<div class="group relative">
  <div class="relative">
    <label for={props.id} class="sr-only">{label}</label>
    <input
      class={cn(
        "submit-input w-full rounded-lg border border-zinc-800 py-2 pl-4 text-zinc-400 shadow-sm transition-colors duration-300 group-hover:border-zinc-700 focus:border-zinc-600 focus:outline-none",
        "disabled:cursor-not-allowed disabled:bg-zinc-900 disabled:text-zinc-500 disabled:group-hover:border-zinc-800",
        className,
        "pr-12",
      )}
      {...props}
    />
    <div
      class="pointer-events-none absolute inset-1 overflow-hidden rounded-lg"
    >
      <div
        id="leftFade"
        class="absolute inset-y-0 left-0 w-8 bg-gradient-to-r from-zinc-950 to-transparent opacity-0 transition-opacity duration-300"
        style={{ "--tw-gradient-from": fadeColor }}
      >
      </div>
      <div
        id="rightFade"
        class="absolute inset-y-0 right-10 w-10 bg-gradient-to-l from-zinc-950 to-transparent opacity-0 transition-opacity duration-300"
        style={{ "--tw-gradient-from": fadeColor }}
      >
      </div>
    </div>
  </div>
  <button
    type="submit"
    class:list={[
      "absolute inset-y-0 right-0 flex h-full w-10 cursor-pointer items-center justify-center rounded-r-lg text-zinc-600 transition-colors duration-300",
      "group-hover:text-zinc-500 hover:text-zinc-300",
      "focus:border focus:border-zinc-300 focus:text-zinc-300 focus:outline-none",
      "disabled:cursor-not-allowed disabled:group-hover:text-zinc-600 disabled:hover:text-zinc-600",
    ]}
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="h-5 w-5"
    >
      <path d="M5 12h14M12 5l7 7-7 7"></path>
    </svg>
  </button>
</div>
<script>
  // main.ts
  document.addEventListener("DOMContentLoaded", () => {
    class DynamicInput {
      private showLeftFade = false;
      private showRightFade = false;
      private inputRef: HTMLInputElement;

      constructor() {
        this.inputRef = document.querySelector(
          ".submit-input",
        ) as HTMLInputElement;
        this.initialize();
      }

      private checkOverflow() {
        const scrollLeft = this.inputRef.scrollLeft;
        const scrollWidth = this.inputRef.scrollWidth;
        const clientWidth = this.inputRef.clientWidth;

        this.showLeftFade = scrollLeft > 0;
        this.showRightFade = scrollLeft + clientWidth < scrollWidth - 1;

        this.updateFadeElements();
      }

      private updateFadeElements() {
        const leftFade = document.getElementById("leftFade");
        const rightFade = document.getElementById("rightFade");

        // Smooth transitions
        if (leftFade) {
          leftFade.classList.toggle("opacity-100", this.showLeftFade);
          leftFade.classList.toggle("opacity-0", !this.showLeftFade);
        }
        if (rightFade) {
          rightFade.classList.toggle("opacity-100", this.showRightFade);
          rightFade.classList.toggle("opacity-0", !this.showRightFade);
        }
      }

      private initialize() {
        this.checkOverflow();

        // Event listeners
        this.inputRef.addEventListener("scroll", () => this.checkOverflow());
        this.inputRef.addEventListener("input", () => this.checkOverflow());
        window.addEventListener("resize", () => this.checkOverflow());
      }
    }

    // Initialize the component
    new DynamicInput();
  });
</script>

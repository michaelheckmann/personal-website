---
import { getCollection, type CollectionEntry } from "astro:content";

import { extractLocaleFromPath, removeLocaleFromPath } from "@/lib/routing";
import type { SiteConfig } from "@/lib/types";
import Layout from "@/components/layout/layout.astro";
import { ensureLang, setLanguage } from "@/i18n/translation";
import ArticleTemplate from "@/templates/blog/article.astro";

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const lang = ensureLang(Astro.params.lang);
setLanguage(lang);

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => {
    const [lang, ...slug] = post.id.split("/");
    return {
      params: { lang, slug: slug.join("/") },
      props: post,
    };
  });
}

type Props = CollectionEntry<"blog">;

const posts = await getCollection("blog");
const references = posts.filter((post) => {
  return post.data.reference === Astro.props.data.reference;
});

const config: SiteConfig = {
  lang,
  title: Astro.props.data.title,
  description: Astro.props.data.description,
  image: Astro.props.data.cover.src,
  translationLinks: references.map((ref) => {
    const lang = extractLocaleFromPath(ref.id);
    const path = `/${lang}/blog/${removeLocaleFromPath(ref.id)}`;
    return { lang, href: `${new URL(path, canonicalURL.origin)}` };
  }),
};
setLanguage(config.lang);
---

<Layout {...config}>
  <ArticleTemplate {...Astro.props} />
</Layout>
